Q1 : Why didn't we use sudo before node lab.js in this case?
	We didn't use sudo because running node lab.js only needs 
	user-level permissions. sudo is only needed for commands 
	that require administrator (root) rights.

Q2 : What does lab.js do?
	It reads the contents of plain.txt and prints it to the terminal.

Q3 : Why does *************after readFile*****************
appear before the contents of plain.txt in the output while the call to 
readFile is before the console.log call that prints this line?
	Because fs.readFile in Node.js is asynchronous. Which means Node 
	doesn't wait for the file reading to finish before moving on to 
	the next line. so console.log("after readFile") runs first, and then
	once the file is done reading, Node prints its contents.

Q4 : What does the function toString('utf8') do?
	It converts the raw byte buffer (numbers representing characters)
	into a human-readable string using the UTF-8 encoding. Without it, 
	Node prints the raw byte values (numbers).

Q5 : We  donâ€™t need to convert the read buffer using toString('utf8') 
before we serve it up to the client. Why not?
	You don't need .tostring('utf8') , because res.end() can send the
	file buffer directly to the browser. (can read and display the
	buffer as text, so converting it isn't necessary)
Q6 : How can we build a server that is capable of serving all types of files
without having to change the code every time?
	We can make the server check the file extension adn automatically set
	the appropriate Content-Type header. That way it can serve HTML, JS,
	TXT, JPG, or any file without changing the code each time.

Q7 : : The http server should probably able to send html, js, and other files
to the browser, as well as respond to queries/routes like the one you implemented 
in homework assignment 2. How can we combine all these features in the same server?
	We can handle static files by reading them based on the requested path, 
	and handle dynamic routes by checking for specific URL patterns and responding 
	accordingly. Using a framework like Express.js makes it easier to serve both static and dynamic content in the same server.
